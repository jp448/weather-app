{"version":3,"sources":["icons/partly_sunny.png","icons/cloudy.png","icons/fog.png","icons/rain.png","icons/snow.png","icons/sunny.png","icons/thunderstorm.png","WeatherDisplay.js","Select.js","Input.js","App.js","reportWebVitals.js","index.js","Keys.js"],"names":["WeatherDisplay","imgsrc","weather","expr","main","desr","description","partlySunny","cloudy","sunny","snow","rain","thunderstorm","fog","className","name","sys","country","src","Math","round","temp","message","Select","onChangeHandle","useState","options","setOptions","useEffect","a","response","axios","get","data","console","log","getData","for","id","onChange","e","target","value","map","d","alpha2Code","Input","style","padding","type","placeholder","api","key","keys","API_KEY","base","BASE_URL","App","queryCity","setQueryCity","queryCountry","setQueryCountry","setWeather","foundCity","lat","random","lon","onClick","fetch","then","res","json","result","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.131d2bd0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/partly_sunny.3c07dc77.png\";","export default __webpack_public_path__ + \"static/media/cloudy.7c0e17c7.png\";","export default __webpack_public_path__ + \"static/media/fog.1efff97d.png\";","export default __webpack_public_path__ + \"static/media/rain.3d45f1ee.png\";","export default __webpack_public_path__ + \"static/media/snow.ad1383f7.png\";","export default __webpack_public_path__ + \"static/media/sunny.9c276258.png\";","export default __webpack_public_path__ + \"static/media/thunderstorm.59fe06bd.png\";","import React from 'react';\nimport partlySunny from \"./icons/partly_sunny.png\";\nimport cloudy from \"./icons/cloudy.png\";\nimport fog from \"./icons/fog.png\";\nimport rain from \"./icons/rain.png\";\nimport snow from \"./icons/snow.png\";\nimport sunny from \"./icons/sunny.png\";\nimport thunderstorm from \"./icons/thunderstorm.png\";\nimport \"./WeatherDisplay.css\";\n\n// Handles the weather display container for the app - if no city found displays a message that states this\nconst WeatherDisplay = ({weather}) => {\n  var expr = typeof weather.main != \"undefined\" ?  weather.weather[0].main : 'no';\n  var desr = typeof weather.main != \"undefined\" ?  weather.weather[0].description : 'no';\n  var imgsrc;\n  switch (expr) {\n    case \"Clouds\": {\n      if (desr === \"few clouds\" || desr === \"scattered clouds\")\n        imgsrc = partlySunny;\n      else \n        imgsrc = cloudy;\n      break;\n    }\n    case \"Clear\": {\n      imgsrc = sunny;\n      break;\n    }\n    case \"Snow\": {\n      imgsrc = snow;\n      break;\n    }\n    case \"Rain\": {\n      imgsrc = rain;\n      break;\n    }\n    case \"Drizzle\": {\n      imgsrc = rain;\n      break;\n    }\n    case \"Thunderstorm\": {\n      imgsrc = thunderstorm;\n      break;\n    }\n    default: {\n      imgsrc = fog;\n      break;\n    }\n  }\n\n  return (\n    <div className=\"WeatherDisplay\">\n        {typeof weather.main != \"undefined\" ? (\n          <div>\n            <div className=\"location-container\">\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n              </div>\n\n            </div>\n            <div className=\"weather-container\">\n              <div className=\"weather\">{weather.weather[0].description}</div>\n              <div className=\"weather-temp\">\n                \n                <div className=\"weather-icon\">\n                  <img src={imgsrc}/>\n                </div>\n                <div className=\"temperature\">\n                  {Math.round(weather.main.temp)}Â°C\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n        <div>{weather.message}</div>\n        )}\n    </div>\n  );\n}\n\nexport default WeatherDisplay;","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n// handles the select input in the form\nconst Select = ({onChangeHandle}) => {\n\n    // options a state that changes depending on API return data\n    const [options, setOptions] = useState([]);\n\n    // function called on re-render. Grabs the data from an API that has country names and the 2 Country Code necessary for the Weather API.\n    useEffect(() => {\n        async function getData() {\n          let response = [];\n          response = await axios.get(\"https://restcountries.eu/rest/v2/all\");\n          setOptions(response.data);\n          console.log(response.data)\n        }\n        getData();\n      }, []);\n    \n    return (\n      <div>\n        <label for=\"country\">Select a Country: </label>\n        <br></br>\n        <select name=\"countries\" id=\"countries\" onChange={(e) => onChangeHandle(e.target.value)}>\n          {options.map(d => (\n            <option value={d.alpha2Code}>{d.name}</option>\n          ))}\n        </select>\n    </div>\n    );\n};\n\nexport default Select;","import React from \"react\";\n\n// handles the input field in the form\nconst Input = ({onChangeHandle, value}) => {\n    \n    return (\n        <div style={{padding: \"15px 0px\"}}>\n            <label for=\"city\">Enter a City: </label>\n            <br></br>\n            <input\n            type=\"text\"\n            placeholder=\"Search...\"\n            onChange={(e) => onChangeHandle(e.target.value)}\n            value={value}\n            />\n      </div>\n    );\n};\n\nexport default Input;","import React, { useState, useEffect } from \"react\";\nimport keys from \"./Keys\";\nimport axios from \"axios\"; \nimport WeatherDisplay from \"./WeatherDisplay\";\nimport Select from \"./Select\";\nimport Input from \"./Input\";\nimport \"./App.css\"\n\nconst api = {\n  key: keys.API_KEY,\n  base: keys.BASE_URL\n}\n\nfunction App() {\n  // States that may change including the input for city/country and the weather data sent from API.\n  const [queryCity, setQueryCity] = useState(\"\");\n  const [queryCountry, setQueryCountry] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  // Function that runs only on re-render. Finds a random geographical location to display the weather.\n  useEffect(() => {\n    async function getData() {\n      let response = [];\n      let foundCity = false;\n      while (!foundCity) {\n        let lat = Math.random()*180 - 90;\n        let lon = Math.random()*180 - 90;\n        response = await axios.get(`${api.base}weather?lat=${lat}&lon=${lon}&units=metric&appid=${api.key}`);\n        foundCity = response.data.name !== '' ? true : false;\n      }\n      setWeather(response.data);\n    }\n    getData();\n  }, []);\n\n  // Grabs the user inputs from form and grabs the correct return data\n  const search = (e) => {\n    fetch(`${api.base}weather?q=${queryCity},${queryCountry}&units=metric&appid=${api.key}`)\n      .then((res) => res.json())\n      .then((result) => {\n        setQueryCity(\"\");\n        setQueryCountry(\"\");\n        setWeather(result);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <main>\n        <div className=\"centerWindow\">\n          <form className=\"App-Form float\">\n            <Input onChangeHandle = {setQueryCity} value={queryCity} />\n            <Select onChangeHandle = {setQueryCountry} />\n            <p className=\"App-Button\" onClick={search}>Submit</p>\n          </form>\n          <div  className=\"float\" >\n            <WeatherDisplay weather={weather}/>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// Info for the API calls \nmodule.exports = {\n    API_KEY: \"417cd906486543e1f5f18a65eb07120a\",\n    BASE_URL: \"https://api.openweathermap.org/data/2.5/\",\n  };"],"sourceRoot":""}